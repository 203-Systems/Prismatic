[{"C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\index.js":"1","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\serviceWorker.js":"2","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Components\\App.jsx":"3","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\deviceConfigs.js":"4","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\config.js":"5","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Engine\\projectFile.js":"6","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Components\\ProjectFileReader.jsx":"7","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Components\\Canvas.jsx":"8","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Components\\AutoplayControl.jsx":"9","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Engine\\autoPlay.js":"10","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Engine\\keySound.js":"11","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Engine\\keyLED.js":"12","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\palette.js":"13","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Components\\Button.jsx":"14","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\buttonConfigs.js":"15"},{"size":480,"mtime":1610853349565,"results":"16","hashOfConfig":"17"},{"size":5227,"mtime":1602971545249,"results":"18","hashOfConfig":"17"},{"size":13728,"mtime":1610869569536,"results":"19","hashOfConfig":"17"},{"size":24568,"mtime":1610960156768,"results":"20","hashOfConfig":"17"},{"size":80,"mtime":1610410124460,"results":"21","hashOfConfig":"17"},{"size":7628,"mtime":1610837773151,"results":"22","hashOfConfig":"17"},{"size":427,"mtime":1610006627608,"results":"23","hashOfConfig":"17"},{"size":16127,"mtime":1610959882025,"results":"24","hashOfConfig":"17"},{"size":2840,"mtime":1610670351205,"results":"25","hashOfConfig":"17"},{"size":3819,"mtime":1610750506540,"results":"26","hashOfConfig":"17"},{"size":1721,"mtime":1610764846376,"results":"27","hashOfConfig":"17"},{"size":4891,"mtime":1610837845925,"results":"28","hashOfConfig":"17"},{"size":5072,"mtime":1610440533168,"results":"29","hashOfConfig":"17"},{"size":1316,"mtime":1610854742148,"results":"30","hashOfConfig":"17"},{"size":1328,"mtime":1610959408074,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1l62myl",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":43,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\index.js",[],["68","69"],"C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\serviceWorker.js",[],"C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Components\\App.jsx",["70","71","72","73"],"import React, { Component } from \"react\";\r\nimport ProjectFileReader from \"./ProjectFileReader\";\r\nimport ProjectFile from \"../Engine/projectFile\";\r\nimport Canvas from \"./Canvas\";\r\nimport config from \"../config\";\r\nimport deviceConfigs from \"../deviceConfigs\";\r\nimport Select from \"react-select\";\r\nimport AutoplayControl from \"./AutoplayControl\";\r\nimport WebMidi from \"webmidi\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount()\r\n  {\r\n    this.loadUserConfigPerfences()\r\n    setTimeout((this.initlization).bind(this), 0) //Hacky way to get initlization done after first render\r\n  }\r\n\r\n  initlization()\r\n  {\r\n    WebMidi.enable(err => {\r\n      if (err) {\r\n        this.onMIDIFailure()\r\n      } else {\r\n        this.onMIDISuccess();\r\n      }},\r\n      true\r\n    );\r\n\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    if (urlParams.get(\"unipack\")) {\r\n      var unipack_url = urlParams.get(\"unipack\");\r\n      this.downloadProjectFile(unipack_url);\r\n    }\r\n  }\r\n\r\n  state = {\r\n    projectFile: undefined,\r\n    statusMessage: \"No project loaded\",\r\n\r\n    midiInput: {},\r\n    midiOutput: {},\r\n\r\n    layoutConfigName: config.defaultLayout,\r\n    layoutConfig: deviceConfigs[config.defaultLayout],\r\n\r\n    inputDevice: undefined,\r\n    inputConfigName: undefined,\r\n    inputConfig: undefined,\r\n\r\n    outputDevice: undefined,\r\n    outputConfigName: undefined,\r\n    outputConfig: undefined,\r\n  };\r\n\r\n  canvas = React.createRef();\r\n\r\n  downloadProjectFile = (url) => {\r\n    alert(\"Download Unipack from \" + url)\r\n    fetch(\"https://cors-anywhere.herokuapp.com/\" + url).then\r\n    ((r => \r\n      {var file = r.blob();\r\n        console.log(file);\r\n        this.loadProjectFile(file);\r\n      }).bind(this));\r\n  };\r\n\r\n  loadProjectFile = (projectPack) => {\r\n    if(projectPack == null)\r\n      return\r\n    this.setState({statusMessage: \"Loading Unipack\"});\r\n    new ProjectFile(projectPack, this.canvas)\r\n      .then((projectFile) => {\r\n        this.setState({ projectFile: projectFile });\r\n        console.log(projectFile);\r\n        this.setState({statusMessage: `Current Project: ${this.state.projectFile.info[\"title\"]} by ${this.state.projectFile.info[\"producerName\"]}`});\r\n      })\r\n      .catch((message) => {\r\n        this.setState({statusMessage: \"Error Loading Unipack\"});\r\n        alert(\"Error Loading Unipack: \" + projectPack.name)\r\n        console.error(\"Error Loading Unipack\")\r\n        console.error(message);\r\n      });\r\n  };\r\n\r\n  onMIDISuccess(){\r\n    console.log(\"Got access your MIDI devices.\");\r\n\r\n    this.updateMidiList();\r\n\r\n    WebMidi.addListener(\"connected\", this.onMidiStateChange.bind(this))\r\n    WebMidi.addListener(\"disconnected\", this.onMidiStateChange.bind(this))\r\n\r\n    this.loadUserDevicePerfences()\r\n  };\r\n\r\n  onMidiStateChange(e) {\r\n    console.log(e);\r\n    console.log(e.port.name, e.port.type, e.port.state);\r\n    if (e.port.state === \"disconnected\") {\r\n      if (e.port.type === \"input\") {\r\n        if (\r\n          this.state.inputDevice !== undefined &&\r\n          this.state.inputDevice.name === e.port.name\r\n        ) {\r\n          this.setState({ inputDevice: undefined });\r\n          this.setState({ inputDeviceConfig: undefined });\r\n          this.setState({ inputDeviceName: undefined });\r\n        }\r\n      } else if (e.port.type === \"output\") {\r\n        if (\r\n          this.state.outputDevice !== undefined &&\r\n          this.state.outputDevice.name === e.port.name\r\n        ) {\r\n          this.setState({ outputDevice: undefined });\r\n          this.setState({ outputDeviceConfig: undefined });\r\n          this.setState({ outputDeviceName: undefined });\r\n        }\r\n      }\r\n    }\r\n    this.updateMidiList();\r\n  }\r\n  \r\n  updateMidiList() {\r\n    var midiInput = {};\r\n    console.log(\"Input\");\r\n    for (var input of WebMidi.inputs) {\r\n      console.log(input.name);\r\n      midiInput[input.name] = input\r\n    }\r\n    this.setState({ midiInput: midiInput });\r\n\r\n    var midiOutput = {};\r\n    console.log();\r\n    console.log(\"Output\");\r\n    for (var output of WebMidi.outputs) {\r\n      console.log(output.name);\r\n      midiOutput[output.name] = output\r\n    }\r\n    this.setState({ midiOutput: midiOutput });\r\n  }\r\n\r\n\r\n  onMIDIFailure() {\r\n    console.log(\"Could not access your MIDI devices.\");\r\n    alert(\r\n      \"Could not access your MIDI devices. Try use another web browser or hardware platform.\"\r\n    );\r\n  }\r\n\r\n  autoConfigPicker(deviceName, mode) {\r\n    if (deviceName !== undefined) {\r\n      for (var key in deviceConfigs) {\r\n        if (deviceConfigs[key].midiNameRegex !== undefined && deviceName.match(deviceConfigs[key].midiNameRegex) !== null) {\r\n          var config = deviceConfigs[key];\r\n          console.log(\r\n            `${\r\n              mode ? \"Output\" : \"input\"\r\n            } config has been auto assigned to ${key}`\r\n          );\r\n          switch (mode) {\r\n            case \"Input\":\r\n              this.setInputConfig({label: key, value: config})\r\n              return true;\r\n            case \"Output\":\r\n              this.setOutputConfig({label: key, value: config})\r\n              return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    alert(\r\n      `Unable to find matching ${\r\n        mode ? \"output\" : \"input\"\r\n      } config for device ${deviceName}`\r\n    );\r\n    return false\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"main\">\r\n          <div className=\"sidebar\">\r\n            <text>203 | Prismatic (Tech Preview Demo)</text>\r\n            <div className=\"sidebarItem\" />\r\n            <text className=\"sidebarItem\">\r\n              {this.state.statusMessage}\r\n            </text>\r\n            <ProjectFileReader\r\n              loadProjectFile={this.loadProjectFile}\r\n            ></ProjectFileReader>\r\n            <div className=\"sidebarItem\" />\r\n            <text>UI Layout</text>\r\n            <Select\r\n              className=\"sidebarItem\"\r\n              options={this.prepSelectConfig(deviceConfigs, \"layout\")}\r\n              autosize={true}\r\n              value={\r\n                this.state.layoutConfigName !== undefined\r\n                  ? {\r\n                      label: this.state.layoutConfigName,\r\n                      value: this.state.layoutConfig,\r\n                    }\r\n                  : { label: \"Layout Config\", value: undefined }\r\n              }\r\n              onChange={this.setLayoutConfig.bind(this)}\r\n            />\r\n            <text>Midi Input Device</text>\r\n            <Select\r\n              className=\"sidebarItem\"\r\n              options={this.prepSelectConfig(this.state.midiInput)}\r\n              autosize={true}\r\n              value={\r\n                this.state.inputDevice !== undefined\r\n                  ? {\r\n                      label: this.state.inputDevice.name,\r\n                      value: this.state.inputDevice,\r\n                    }\r\n                  : { label: \"Input Device\", value: undefined }\r\n              }\r\n              onChange={this.setInputDevice.bind(this)}\r\n            />\r\n            <text>Midi Input Device Config</text>\r\n            <Select\r\n              className=\"sidebarItem\"\r\n              options={this.prepSelectConfig(deviceConfigs, \"keymap\")}\r\n              autosize={true}\r\n              value={\r\n                this.state.inputConfigName !== undefined\r\n                  ? {\r\n                      label: this.state.inputConfigName,\r\n                      value: this.state.inputConfig,\r\n                    }\r\n                  : { label: \"Input Device Config\", value: undefined }\r\n              }\r\n              onChange={this.setInputConfig.bind(this)}\r\n            />\r\n            <text>Midi Output Device</text>\r\n            <Select\r\n              className=\"sidebarItem\"\r\n              options={this.prepSelectConfig(this.state.midiOutput)}\r\n              autosize={true}\r\n              value={\r\n                this.state.outputDevice !== undefined\r\n                  ? {\r\n                      label: this.state.outputDevice.name,\r\n                      value: this.state.outputDevice,\r\n                    }\r\n                  : { label: \"Output Device\", value: undefined }\r\n              }\r\n              onChange={this.setOutputDevice.bind(this)}\r\n            />\r\n            <text>Midi Output Device Config</text>\r\n            <Select\r\n              className=\"sidebarItem\"\r\n              options={this.prepSelectConfig(deviceConfigs, \"keymap\")}\r\n              autosize={true}\r\n              value={\r\n                this.state.outputConfigName !== undefined\r\n                  ? {\r\n                      label: this.state.outputConfigName,\r\n                      value: this.state.outputConfig,\r\n                    }\r\n                  : { label: \"Output Device Config\", value: undefined }\r\n              }\r\n              onChange={this.setOutputConfig.bind(this)}\r\n            />\r\n            <div />\r\n            <AutoplayControl project={this.state.projectFile} canvas={this.canvas} layoutConfig={this.state.layoutConfig}/>\r\n          </div>\r\n            <Canvas\r\n              ref={this.canvas}\r\n              projectFile={this.state.projectFile}\r\n              layoutConfig={this.state.layoutConfig}\r\n              inputDevice={this.state.inputDevice}\r\n              inputConfig={this.state.inputConfig}\r\n              outputDevice={this.state.outputDevice}\r\n              outputConfig={this.state.outputConfig}\r\n            />\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n\r\n  setLayoutConfig(config) {\r\n    // console.log(config)\r\n    this.setState({ layoutConfigName: config.label });\r\n    this.setState({ layoutConfig: config.value });\r\n    localStorage.setItem('perferedLayoutConfig', config.label);\r\n  }\r\n\r\n  setInputConfig(config) {\r\n    // console.log(config)\r\n    this.setState({ inputConfigName: config.label });\r\n    this.setState({ inputConfig: config.value }, this.initlizateInputDevice.bind(this));\r\n    localStorage.setItem('perferedInputConfig', config.label);\r\n  }\r\n\r\n  setOutputConfig(config) {\r\n    // console.log(config)\r\n    this.setState({ outputConfigName: config.label });\r\n    this.setState({ outputConfig: config.value }, this.initlizateOutputDevice.bind(this));\r\n    localStorage.setItem('perferedOutputConfig', config.label);\r\n  }\r\n\r\n  setInputDevice(device, autoPickConfig = true) {\r\n    this.setState({ inputDevice: device.value });\r\n    if(autoPickConfig) this.autoConfigPicker(device.value.name, \"Input\");\r\n    localStorage.setItem('perferedInputDevice', device.value.name);\r\n  }\r\n\r\n  setOutputDevice(device, autoPickConfig = true) {\r\n    // console.log(\"Output device set to \" + device.name);\r\n    this.setState({ outputDevice: device.value });\r\n    if(autoPickConfig) this.autoConfigPicker(device.value.name, \"Output\");\r\n    localStorage.setItem('perferedOutputDevice', device.value.name);\r\n  }\r\n\r\n  initlizateInputDevice()\r\n  {\r\n    if(this.state.inputConfig !== undefined && this.state.inputDevice !== undefined)\r\n    {\r\n      if(this.state.inputConfig.inputInfoMessage !== undefined)\r\n      {\r\n        for(var i in this.state.inputConfig.infoMessage)\r\n        {\r\n          alert(this.state.inputConfig.inputInfoMessage[i])\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  initlizateOutputDevice()\r\n  {\r\n    //Sysex\r\n    if(this.state.outputConfig !== undefined && this.state.outputDevice !== undefined)\r\n    {\r\n      if(this.state.outputConfig.initializationSysex !== undefined)\r\n      {\r\n        for(var i in this.state.outputConfig.initializationSysex)\r\n        {\r\n          this.state.outputDevice.sendSysex([], this.state.outputConfig.initializationSysex[i])\r\n        }\r\n      }\r\n      if(this.state.outputConfig.outputInfoMessage !== undefined)\r\n      {\r\n        for(var i in this.state.outputConfig.infoMessage)\r\n        {\r\n          alert(this.state.outputConfig.outputInfoMessage[i])\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  prepSelectConfig(config, requiredKey = undefined) {\r\n    var result = [];\r\n    for (var key in config) {\r\n      if (requiredKey === undefined || config[key][requiredKey] !== undefined) {\r\n        result.push({\r\n          label: key,\r\n          value: config[key],\r\n        });\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  loadUserConfigPerfences() {\r\n    const perferedLayoutConfig = localStorage.getItem('perferedLayoutConfig');\r\n    if(perferedLayoutConfig !== null && deviceConfigs[perferedLayoutConfig] !== undefined)\r\n    {\r\n      this.setLayoutConfig({label: perferedLayoutConfig, value:deviceConfigs[perferedLayoutConfig]})\r\n    }\r\n\r\n    const perferedInputConfig = localStorage.getItem('perferedInputConfig');\r\n    if(perferedInputConfig !== null && deviceConfigs[perferedInputConfig] !== undefined)\r\n    {\r\n      this.setInputConfig({label: perferedInputConfig, value:deviceConfigs[perferedInputConfig]})\r\n    }\r\n\r\n    const perferedOutputConfig = localStorage.getItem('perferedOutputConfig');\r\n    if(perferedOutputConfig !== null && deviceConfigs[perferedOutputConfig] !== undefined)\r\n    {\r\n      this.setOutputConfig({label: perferedOutputConfig, value:deviceConfigs[perferedOutputConfig]})\r\n    }\r\n  }\r\n\r\n  loadUserDevicePerfences() {\r\n    const perferedInputDevice = localStorage.getItem('perferedInputDevice');\r\n    if(perferedInputDevice !== null && this.state.midiInput[perferedInputDevice] !== undefined)\r\n    {\r\n      this.setInputDevice({label: perferedInputDevice, value:this.state.midiInput[perferedInputDevice]}, false)\r\n    }\r\n\r\n    const perferedOutputDevice = localStorage.getItem('perferedOutputDevice');\r\n    if(perferedOutputDevice !== null && this.state.midiOutput[perferedOutputDevice] !== undefined)\r\n    {\r\n      this.setOutputDevice({label: perferedOutputDevice, value:this.state.midiOutput[perferedOutputDevice]}, false)\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\deviceConfigs.js",["74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116"],"C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\config.js",[],"C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Engine\\projectFile.js",["117","118","119"],"import KeyLED from \"./keyLED\"\r\nimport AutoPlay from \"./autoPlay\"\r\nimport keySound from './keySound';\r\nimport { Howler } from \"howler\";\r\n\r\nclass ProjectFile {\r\n  info = {};\r\n  soundFiles = {};\r\n  keySound = undefined;\r\n  autoplay = undefined;\r\n  keyLED = undefined;\r\n  canvas = undefined\r\n  activeKeyLED = {}\r\n\r\n  constructor(file, canvas) {\r\n    this.canvas = canvas.current;\r\n    return this.unpack(file);\r\n  }\r\n\r\n  unpack(projectFile) {\r\n    return new Promise(async (resolve, reject) => {\r\n      try{\r\n      console.log(this.info)\r\n      let JSZip = require(\"jszip\");\r\n      let files = await JSZip.loadAsync(projectFile).then(function (zip) {\r\n        return Object.values(zip.files)\r\n      }, function (e) {\r\n        reject(\"Failed to extract selected file\");\r\n        console.log(e);\r\n        return;\r\n      });\r\n      let projectRoot = undefined;\r\n      let keySoundFile = undefined;\r\n      let autoplayFile = undefined;\r\n      let keyLEDFiles = {};\r\n\r\n      //Load info and categorize files\r\n      for (let file of files) {\r\n        let filename = file.name.toLowerCase()\r\n        if (!filename.endsWith(\"/\")) //Ignore folder\r\n        {\r\n          if (filename.includes(\"sounds/\")) //Audio\r\n          {\r\n            console.log(\"Sound file: \" + filename);\r\n            this.soundFiles[filename.split(\"/\").pop()] = await file.async(\"blob\").then(function (blob) {\r\n              return new keySound(blob, filename.split(\"/\").pop())\r\n            });\r\n          }\r\n          else {\r\n            let text = await file.async(\"text\").then((text) => { return text = text.split(/\\r?\\n/); });\r\n            if (filename.endsWith(\"info\")) //Text\r\n            {\r\n              console.log(\"Info file: \" + filename);\r\n              projectRoot = filename.slice(0, -4);\r\n              console.log(\" project root: \" + projectRoot);\r\n              text.forEach(info => this.info[info.split('=')[0]] = info.split('=')[1]);\r\n              this.info[\"buttonX\"] = parseInt(this.info[\"buttonX\"]);\r\n              this.info[\"buttonY\"] = parseInt(this.info[\"buttonY\"]);\r\n              this.info[\"chain\"] = parseInt(this.info[\"chain\"]);\r\n              this.info[\"squareButton\"] = this.info[\"squareButton\"] === \"true\";\r\n              this.info[\"landscape\"] = this.info[\"landscape\"] === \"true\";\r\n              console.log(\" title: \" + this.info[\"title\"])\r\n              console.log(\" producerName: \" + this.info[\"producerName\"])\r\n              console.log(\" buttonX: \" + this.info[\"buttonX\"])\r\n              console.log(\" buttonY: \" + this.info[\"buttonY\"])\r\n              console.log(\" chain: \" + this.info[\"chain\"])\r\n              console.log(\" squareButton: \" + this.info[\"squareButton\"])\r\n              console.log(\" landscape: \" + this.info[\"landscape\"])\r\n              if (this.info[\"buttonX\"] !== 8 || this.info[\"buttonY\"] !== 8) {\r\n                reject(\"Only 8x8 Unipad project are supported\");\r\n                return;\r\n              }\r\n              if (this.info[\"chain\"] > 8) {\r\n                // reject(\"Only Unipad project that has within 8 chains are supported\");\r\n                // alert(`This Unipad Project has ${this.info[\"chain\"]} chains. Projects that has more than 8 chains are limited supported`)\r\n                // return;\r\n              }\r\n            }\r\n            else if (filename.endsWith(\"keysound\")) {\r\n              console.log(\"KeySound file: \" + filename);\r\n              keySoundFile = text;\r\n            }\r\n            else if (filename.endsWith(\"autoplay\")) {\r\n              console.log(\"AutoPlay file: \" + filename);\r\n              autoplayFile = text;\r\n            }\r\n            else if (filename.includes(\"keyled/\")) {\r\n              console.log(\"KeyLED file: \" + filename);\r\n              keyLEDFiles[filename] = text;\r\n            }\r\n            else {\r\n              console.log(\"Unknown file: \" + filename);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      //Initialize 4D arraies\r\n      this.keySound = new Array(this.info.chain).fill(null).map(\r\n        () => new Array(this.info.buttonX).fill(null).map(\r\n          () => new Array(this.info.buttonY).fill(null).map(\r\n            () => new Array())));\r\n\r\n      this.keyLED = new Array(this.info.chain).fill(null).map(\r\n        () => new Array(this.info.buttonX).fill(null).map(\r\n          () => new Array(this.info.buttonY).fill(null).map(\r\n            () => new Array())));\r\n\r\n      // Load KeyLED\r\n      for (var [name, text] of Object.entries(keyLEDFiles)) {\r\n        let fileInfo = name.split(\"/\").pop().split(\" \");\r\n        // if (fileInfo.length === 5) {\r\n        //   this.keyLED[parseInt(fileInfo[0]) - 1][parseInt(fileInfo[2]) - 1][parseInt(fileInfo[1]) - 1][fileInfo[4].charCodeAt(0) - 97] = new KeyLED(text, parseInt(fileInfo[3]), this.canvas)\r\n        //   // console.log(name)\r\n        //   // console.log([parseInt(fileInfo[0]) - 1, parseInt(fileInfo[2]) - 1, parseInt(fileInfo[1]) - 1, fileInfo[4].charCodeAt(0) - 97])\r\n        //   // console.log(this.keyLED[parseInt(fileInfo[0]) - 1][parseInt(fileInfo[2]) - 1][parseInt(fileInfo[1]) - 1][fileInfo[4].charCodeAt(0) - 97])\r\n        // }\r\n        // else if (fileInfo.length === 4) {\r\n          let index = fileInfo[4] !== undefined ? fileInfo[4].charCodeAt(0) - 97 : 0 //97 is 'a' \r\n          // console.log([parseInt(fileInfo[0]) - 1, parseInt(fileInfo[2]) - 1, parseInt(fileInfo[1]) - 1, index])\r\n          let [chain, x, y, repeat] = [parseInt(fileInfo[0]) - 1, parseInt(fileInfo[2]) - 1, parseInt(fileInfo[1]) - 1, parseInt(fileInfo[3])]\r\n          this.keyLED[chain][x][y][index] = new KeyLED(text, repeat, this.canvas, [chain, x, y, index], this.activeKeyLED)\r\n        // }\r\n        // else {\r\n        //   console.warn(\"Unknown keyLED file name: \" + name);\r\n        // }\r\n      }\r\n\r\n      //Load KeySound\r\n      for (var line of keySoundFile) {\r\n        line = line.trim()\r\n\r\n        if (line == \"\") //For empty lines\r\n        continue;\r\n\r\n        let command = line.split(\" \");\r\n\r\n        // console.log(command);\r\n        let [chain, x, y, filename] = [parseInt(command[0]) - 1, parseInt(command[2]) - 1, parseInt(command[1]) - 1, command[3].toLowerCase()]\r\n        this.keySound[chain][x][y].push([this.soundFiles[filename], command.slice(4)]);\r\n      }\r\n\r\n      //Load AutoPlay\r\n      if(autoplayFile !== undefined)\r\n        this.autoplay = new AutoPlay(autoplayFile, this.canvas);\r\n\r\n      resolve(this)\r\n    }\r\n    catch(e)\r\n    {\r\n      reject(e)\r\n    }\r\n    });\r\n  }\r\n\r\n  stopKeySound() {\r\n    Howler.stop()\r\n  }\r\n\r\n  stopKeyLED() {\r\n    // console.log(this.activeKeyLED)\r\n    for(var id_str in this.activeKeyLED)\r\n    {\r\n      var[chain, x, y, index] = this.activeKeyLED[id_str]\r\n      this.keyLED[chain][x][y][index].stop(false)\r\n      delete this.activeKeyLED[id_str]\r\n    }\r\n    setTimeout(this.canvas.clearCanvas(), 200)\r\n    // new KeyLED().stopAll()\r\n    // for (var chain = 0; chain < this.info.chain; chain++) {\r\n    //   for (\r\n    //     var x = 0;\r\n    //     chain < this.keyLED[chain].length;\r\n    //     x++\r\n    //   ) {\r\n    //     for (\r\n    //       var y = 0;\r\n    //       chain < this.keyLED[chain][x].length;\r\n    //       y++\r\n    //     ) {\r\n    //       for (\r\n    //         var index = 0;\r\n    //         chain < this.keyLED[chain][x][y].length;\r\n    //         index++\r\n    //       ) {\r\n    //         if (\r\n    //           this.keyLED[chain][x][y][index] !== undefined\r\n    //         ) {\r\n    //           this.keyLED[chain][x][y][index].stop();\r\n    //         }\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // }\r\n  }\r\n\r\n  stopAll() {\r\n    this.stopKeyLED()\r\n    this.stopKeySound()\r\n  }\r\n}\r\n\r\nexport default ProjectFile;","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Components\\ProjectFileReader.jsx",[],"C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Components\\Canvas.jsx",["120","121","122","123","124","125","126","127","128","129","130","131","132","133","134"],"C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Components\\AutoplayControl.jsx",["135","136","137"],"import React, { Component } from \"react\";\r\n\r\nclass AutoplayControl extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    setInterval(() => {\r\n      if (this.props.project !== undefined && this.props.project.autoplay !== undefined) {\r\n        this.forceUpdate();\r\n      }\r\n    }, 1000 / 60);\r\n  }\r\n\r\n  render() {\r\n    var playButton = (\r\n      <button\r\n        style={{ width: \"50px\", marginRight: \"10px\" }}\r\n        onClick={this.playAutoplay}\r\n      >\r\n        Play\r\n      </button>\r\n    );\r\n    var pauseButton = (\r\n      <button\r\n        style={{ width: \"50px\", marginRight: \"10px\" }}\r\n        onClick={this.pauseAutoplay}\r\n      >\r\n        Pause\r\n      </button>\r\n    );\r\n    var stopButton = (\r\n      <button\r\n        style={{ width: \"50px\", marginRight: \"10px\" }}\r\n        onClick={this.stopAutoplay}\r\n      >\r\n        Stop\r\n      </button>\r\n    );\r\n    var buttons = [];\r\n\r\n    var statusText = \"\";\r\n    if (this.props.project == undefined || this.props.project.autoplay == undefined || this.props.project.autoplay.total === 0)\r\n      return null;\r\n    switch (this.props.project.autoplay.status) {\r\n      case \"PLAYING\":\r\n        statusText = ` - ${(\r\n          (this.props.project.autoplay.progress / this.props.project.autoplay.total) *\r\n          100\r\n        ).toFixed(2)}% completed (${this.props.project.autoplay.progress}/${\r\n          this.props.project.autoplay.total\r\n        })`;\r\n        buttons.push(pauseButton);\r\n        break;\r\n      case \"PAUSED\":\r\n        statusText = ` - ${(\r\n          (this.props.project.autoplay.progress / this.props.project.autoplay.total) *\r\n          100\r\n        ).toFixed(2)}% completed (${this.props.project.autoplay.progress}/${\r\n          this.props.project.autoplay.total\r\n        }) - Paused`;\r\n        buttons.push(playButton, stopButton);\r\n        break;\r\n      case \"STOPPED\":\r\n        buttons.push(playButton);\r\n        break;\r\n    }\r\n    return (\r\n      <div>\r\n        <text>{\"Autoplay\" + statusText}</text>\r\n        <div />\r\n        {buttons}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  playAutoplay = () => {\r\n    if (this.props.project.autoplay !== undefined) {\r\n      this.props.project.autoplay.play(\r\n        // this.props.canvas.current,\r\n        // this.props.layoutConfig.canvas_origin\r\n      );\r\n    } else {\r\n      alert(\"No project loaded!\");\r\n    }\r\n  };\r\n\r\n  stopAutoplay = () => {\r\n    if (this.props.project.autoplay !== undefined) {\r\n      this.props.project.autoplay.stop();\r\n      this.props.canvas.current.initlalizeCanvas();\r\n    } else {\r\n      alert(\"No project loaded!\");\r\n    }\r\n  };\r\n\r\n  pauseAutoplay = () => {\r\n    if (this.props.project.autoplay !== undefined) {\r\n      this.props.project.autoplay.pause();\r\n      this.props.project.stopAll();\r\n    } else {\r\n      alert(\"No project loaded!\");\r\n    }\r\n  };\r\n}\r\n\r\nexport default AutoplayControl;\r\n","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Engine\\autoPlay.js",["138"],"class AutoPlay {\r\n  autoplay = undefined;\r\n  status = \"STOPPED\"\r\n  progress = 0\r\n  total = 0\r\n  led = true;\r\n  currentChain = 0\r\n  canvas = undefined;\r\n  lastEventTime = undefined;\r\n\r\n  constructor(text, canvas) {\r\n    this.autoplay = text;\r\n    this.total = text === undefined ? 0 : text.length;\r\n    this.canvas = canvas;\r\n  }\r\n\r\n  play = async (callback) => {\r\n    // console.time(\"Autoplay\")\r\n    if (this.progress === 0) {\r\n      this.canvas.initlalizeCanvas();\r\n      // this.currentChain = parseInt(0);\r\n    }\r\n    this.status = \"PLAYING\"\r\n    this.lastEventTime = Date.now()\r\n    for (this.progress; this.progress < this.autoplay.length; this.progress++) {\r\n      // console.timeEnd(\"Autoplay\");\r\n      // console.time(\"Autoplay\")\r\n\r\n      if (this.status === \"STOPPED\" || this.status === \"PAUSED\") {\r\n        return;\r\n      }\r\n\r\n      console.log(this.autoplay[this.progress])\r\n      let command = this.autoplay[this.progress].split(\" \");\r\n\r\n      if(callback !== undefined)\r\n        callback([this.progress, this.autoplay.length])\r\n\r\n      if (command.length < 2)\r\n        continue;\r\n\r\n      if (this.canvas.currentChain != this.currentChain) {\r\n        this.canvas.chainChange(this.currentChain);\r\n      }\r\n\r\n      switch (command[0]) {\r\n        case 'o':\r\n        case 'on':\r\n          if(this.led)\r\n          {\r\n            this.canvas.keyOn(parseInt(command[2]) - 1, parseInt(command[1]) - 1, undefined, true);\r\n          }\r\n          else\r\n          {\r\n            this.canvas.keyOn(parseInt(command[2]) - 1, parseInt(command[1]) - 1, undefined, true, true, false);\r\n            this.canvas.setColor(parseInt(command[2]) - 1, parseInt(command[1]) - 1, 127)\r\n          }\r\n          break;\r\n        case 'f':\r\n        case 'off':\r\n          if(this.led)\r\n          {\r\n            this.canvas.keyOff(parseInt(command[2]) - 1, parseInt(command[1]) - 1, undefined, true);\r\n          }\r\n          else\r\n          {\r\n            this.canvas.keyOff(parseInt(command[2]) - 1, parseInt(command[1]) - 1, undefined, true);\r\n            this.canvas.setColor(parseInt(command[2]) - 1, parseInt(command[1]) - 1, 0)\r\n          }\r\n          break;\r\n        case 't':\r\n        case 'touch':\r\n            if(this.led)\r\n            {\r\n              this.canvas.keyOn(parseInt(command[2]) - 1, parseInt(command[1]) - 1, undefined, true);\r\n              this.canvas.keyOff(parseInt(command[2]) - 1, parseInt(command[1]) - 1, undefined, true);\r\n            }\r\n            else\r\n            {\r\n              this.canvas.keyOn(parseInt(command[2]) - 1, parseInt(command[1]) - 1, undefined, true, true, false);\r\n              this.canvas.keyOff(parseInt(command[2]) - 1, parseInt(command[1]) - 1, undefined, true);\r\n              this.canvas.setColor(parseInt(command[2]) - 1, parseInt(command[1]) - 1, 3)\r\n              setTimeout(() => {this.canvas.setColor(parseInt(command[2]) - 1, parseInt(command[1]) - 1, 0)}, 200)\r\n            }\r\n            break;\r\n        case 'd':\r\n        case 'delay':\r\n          var ms = parseInt(command[1])\r\n          if(ms < 10)\r\n            break;\r\n          await this.wait(parseInt(command[1]));\r\n          break;\r\n        case 'c':\r\n        case 'chain':\r\n          this.canvas.chainChange(parseInt(command[1]) - 1);\r\n          this.currentChain = parseInt(command[1]) - 1;\r\n          break;\r\n        default:\r\n      }\r\n    }\r\n    this.status = \"STOPPED\"\r\n    this.progress = 0\r\n  }\r\n\r\n  pause() {\r\n    this.status = \"PAUSED\"\r\n  }\r\n\r\n  stop() {\r\n    this.status = \"STOPPED\"\r\n    this.progress = 0\r\n  }\r\n\r\n  wait(ms) {\r\n    var adjusted_ms = this.lastEventTime + ms - Date.now()\r\n    this.lastEventTime += ms\r\n    if(adjusted_ms > 5)\r\n    {\r\n      return new Promise(resolve => setTimeout(resolve, adjusted_ms))\r\n    }\r\n    else\r\n    {\r\n      return \r\n    }\r\n  }\r\n}\r\n\r\nexport default AutoPlay;","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Engine\\keySound.js",[],"C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Engine\\keyLED.js",["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154"],"class KeyLED\r\n{\r\n  keyLED = undefined\r\n  id = undefined\r\n  id_str = undefined\r\n  repeat = 1;\r\n  end = false;\r\n  activeThread = -1\r\n  nextID = 0\r\n  canvas = undefined\r\n  currentOn=[]\r\n  lastEventTime = undefined;\r\n  activeList = undefined //Global, refence to the activeKeyLED object in the projectFile\r\n\r\n  constructor(text, repeat, canvas, id, activeList)\r\n  {\r\n    this.keyLED = text;\r\n    this.repeat = repeat;\r\n    this.canvas = canvas;\r\n    this.id = id;\r\n    this.id_str = `${id[0]} ${id[1]} ${id[2]} ${id[3]}` \r\n    this.activeList = activeList\r\n  }\r\n\r\n  play = async() =>\r\n  {\r\n    if(this.activeList[this.id_str] === undefined)\r\n    {\r\n      this.activeList[this.id_str] = this.id\r\n      // console.log(\"Active List added\")\r\n      // console.log(this.activeList)\r\n    }\r\n    var threadID = this.getID()\r\n    this.activeThread = threadID\r\n    this.currentOn = []\r\n    var currentLoop = 0\r\n    this.end = false;\r\n    this.lastEventTime = Date.now()\r\n    // console.log(\"KeyLED\")\r\n    // console.timeLog(\"KeyOn\")\r\n    while(this.repeat === 0 || currentLoop++ < this.repeat)\r\n    {\r\n      for(var line of this.keyLED)\r\n      {\r\n        line = line.trim()\r\n        if(this.activeThread != threadID)\r\n          return\r\n\r\n        if(line == \"\")\r\n          continue;\r\n        \r\n        let command = line.split(\" \");\r\n        // console.log(line)\r\n\r\n        switch(command[0])\r\n        {\r\n          case 'o': //set color\r\n          case 'on': //set color\r\n              if(command[1] === \"*\")\r\n              {\r\n                command[1] = \"mc\"\r\n              }\r\n              if(command[1] === \"mc\" || command[1] === \"l\") //For \"l\", the y is garbage but it won't be read for the setColor functions so just gonna let it be\r\n              {\r\n                [x, y] = [command[1], parseInt(command[2] - 1)]\r\n              }\r\n              else if(parseInt(command[1]) !== NaN)\r\n              {\r\n                [x, y] = [parseInt(command[2] - 1), parseInt(command[1] - 1)]\r\n              }\r\n\r\n              var color\r\n              if(command[command.length - 2] === \"a\" || command[command.length - 2] === \"auto\")\r\n              {\r\n                color = parseInt(command[command.length - 1])\r\n              }\r\n              else\r\n              {\r\n                color = \"#\" + command[command.length - 1]\r\n              }\r\n\r\n              this.canvas.setColor(x, y, color)\r\n\r\n              var id = x + \"-\" + y\r\n              if(this.currentOn[id] === undefined) \r\n              {\r\n                this.currentOn[id] = [x, y]\r\n              }\r\n              else if(color === 0)\r\n              {\r\n                delete this.currentOn[id]\r\n              }\r\n              break;\r\n          case 'f': //color off\r\n          case 'off': //color off\r\n            var [x, y] = [undefined, undefined]\r\n            if(command[1] === \"*\")\r\n            {\r\n              command[1] = \"mc\"\r\n            }\r\n            if(command[1] === \"mc\" || command[1] === \"l\")\r\n            {\r\n              [x, y] = [command[1], parseInt(command[2] - 1)]\r\n            }\r\n            else if(parseInt(command[1]) !== NaN)\r\n            {\r\n              [x, y] = [parseInt(command[2] - 1), parseInt(command[1] - 1)]\r\n            }\r\n\r\n            this.canvas.setColor(x, y, 0)\r\n            var id = x + \"-\" + y\r\n            delete this.currentOn[id]\r\n            break;\r\n          case 'd': //wait\r\n          case 'delay': \r\n          await this.wait(parseInt(command[1]));\r\n            break;\r\n          default:\r\n        }\r\n      }\r\n      if(this.end)\r\n      {\r\n        this.stop()\r\n        break;\r\n      }\r\n    }\r\n    if(this.activeThread == threadID) //Added due to current thread on the last wait then the next thread started. This will result in the next thread to be stuck\r\n    {\r\n      this.activeThread = -1\r\n      this.removeFromActiveList()\r\n    }\r\n  }\r\n\r\n  wait(ms)\r\n  {\r\n    var adjusted_ms = this.lastEventTime + ms - Date.now()\r\n    this.lastEventTime += ms\r\n    if(adjusted_ms > 5)\r\n    {\r\n      return new Promise(resolve => setTimeout(resolve, adjusted_ms))\r\n    }\r\n    else\r\n    {\r\n      return \r\n    }\r\n  }\r\n\r\n  getID()\r\n  {\r\n    return this.nextID++;\r\n  }\r\n\r\n  stop(clearLight = true)\r\n  { \r\n    //Threading System (Light 1 in delay then we set it to stop and create a Light 2 so it can start right away, set )\r\n    if(this.activeThread === -1)\r\n      return\r\n    this.activeThread = -1\r\n    if(clearLight)\r\n    {\r\n      for(var id in this.currentOn)\r\n      {\r\n        var [x,y] = this.currentOn[id]\r\n        this.canvas.setColor(x, y, 0)\r\n      }\r\n    }\r\n    this.currentOn = []\r\n    this.removeFromActiveList()\r\n  }\r\n\r\n  endLoop()\r\n  {\r\n    this.end = true\r\n  }\r\n\r\n  removeFromActiveList()\r\n  {\r\n    // console.log(\"Try to delete \" + this.id_str)\r\n    // console.log(this.activeList)\r\n    delete this.activeList[this.id_str]\r\n    // console.log(this.activeList)\r\n  }\r\n}\r\n\r\nexport default KeyLED;","C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\palette.js",[],"C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\Components\\Button.jsx",[],"C:\\Users\\caine\\Documents\\GitHub\\prismatic\\src\\buttonConfigs.js",[],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":12,"column":3,"nodeType":"161","messageId":"162","endLine":14,"endColumn":4},{"ruleId":"163","severity":1,"message":"164","line":68,"column":10,"nodeType":"165","messageId":"166","endLine":68,"endColumn":14,"fix":"167"},{"ruleId":"168","severity":1,"message":"169","line":164,"column":11,"nodeType":"170","messageId":"171","endLine":171,"endColumn":12},{"ruleId":"172","severity":1,"message":"173","line":351,"column":17,"nodeType":"174","messageId":"175","endLine":351,"endColumn":18},{"ruleId":"176","severity":1,"message":"177","line":76,"column":28,"nodeType":"178","messageId":"166","endLine":76,"endColumn":30},{"ruleId":"176","severity":1,"message":"177","line":76,"column":53,"nodeType":"178","messageId":"166","endLine":76,"endColumn":55},{"ruleId":"172","severity":1,"message":"179","line":86,"column":15,"nodeType":"174","messageId":"175","endLine":86,"endColumn":17},{"ruleId":"172","severity":1,"message":"180","line":87,"column":15,"nodeType":"174","messageId":"175","endLine":87,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":99,"column":20,"nodeType":"178","messageId":"183","endLine":99,"endColumn":21},{"ruleId":"181","severity":1,"message":"182","line":99,"column":29,"nodeType":"178","messageId":"183","endLine":99,"endColumn":31},{"ruleId":"176","severity":1,"message":"184","line":207,"column":20,"nodeType":"178","messageId":"166","endLine":207,"endColumn":22},{"ruleId":"176","severity":1,"message":"177","line":214,"column":28,"nodeType":"178","messageId":"166","endLine":214,"endColumn":30},{"ruleId":"176","severity":1,"message":"177","line":214,"column":53,"nodeType":"178","messageId":"166","endLine":214,"endColumn":55},{"ruleId":"172","severity":1,"message":"179","line":224,"column":15,"nodeType":"174","messageId":"175","endLine":224,"endColumn":17},{"ruleId":"172","severity":1,"message":"180","line":225,"column":15,"nodeType":"174","messageId":"175","endLine":225,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":237,"column":20,"nodeType":"178","messageId":"183","endLine":237,"endColumn":21},{"ruleId":"181","severity":1,"message":"182","line":237,"column":29,"nodeType":"178","messageId":"183","endLine":237,"endColumn":31},{"ruleId":"176","severity":1,"message":"177","line":299,"column":28,"nodeType":"178","messageId":"166","endLine":299,"endColumn":30},{"ruleId":"176","severity":1,"message":"177","line":299,"column":53,"nodeType":"178","messageId":"166","endLine":299,"endColumn":55},{"ruleId":"172","severity":1,"message":"179","line":309,"column":15,"nodeType":"174","messageId":"175","endLine":309,"endColumn":17},{"ruleId":"172","severity":1,"message":"180","line":310,"column":15,"nodeType":"174","messageId":"175","endLine":310,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":322,"column":20,"nodeType":"178","messageId":"183","endLine":322,"endColumn":21},{"ruleId":"181","severity":1,"message":"182","line":322,"column":29,"nodeType":"178","messageId":"183","endLine":322,"endColumn":31},{"ruleId":"176","severity":1,"message":"177","line":386,"column":28,"nodeType":"178","messageId":"166","endLine":386,"endColumn":30},{"ruleId":"176","severity":1,"message":"177","line":386,"column":53,"nodeType":"178","messageId":"166","endLine":386,"endColumn":55},{"ruleId":"172","severity":1,"message":"185","line":397,"column":15,"nodeType":"174","messageId":"175","endLine":397,"endColumn":16},{"ruleId":"172","severity":1,"message":"186","line":398,"column":15,"nodeType":"174","messageId":"175","endLine":398,"endColumn":16},{"ruleId":"172","severity":1,"message":"180","line":399,"column":15,"nodeType":"174","messageId":"175","endLine":399,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":406,"column":20,"nodeType":"178","messageId":"183","endLine":406,"endColumn":21},{"ruleId":"181","severity":1,"message":"182","line":406,"column":29,"nodeType":"178","messageId":"183","endLine":406,"endColumn":31},{"ruleId":"176","severity":1,"message":"177","line":477,"column":28,"nodeType":"178","messageId":"166","endLine":477,"endColumn":30},{"ruleId":"176","severity":1,"message":"177","line":477,"column":53,"nodeType":"178","messageId":"166","endLine":477,"endColumn":55},{"ruleId":"172","severity":1,"message":"185","line":488,"column":15,"nodeType":"174","messageId":"175","endLine":488,"endColumn":16},{"ruleId":"172","severity":1,"message":"186","line":489,"column":15,"nodeType":"174","messageId":"175","endLine":489,"endColumn":16},{"ruleId":"172","severity":1,"message":"180","line":490,"column":15,"nodeType":"174","messageId":"175","endLine":490,"endColumn":18},{"ruleId":"181","severity":1,"message":"182","line":497,"column":20,"nodeType":"178","messageId":"183","endLine":497,"endColumn":21},{"ruleId":"181","severity":1,"message":"182","line":497,"column":29,"nodeType":"178","messageId":"183","endLine":497,"endColumn":31},{"ruleId":"176","severity":1,"message":"177","line":559,"column":28,"nodeType":"178","messageId":"166","endLine":559,"endColumn":30},{"ruleId":"187","severity":1,"message":"188","line":569,"column":15,"nodeType":"174","messageId":"189","endLine":569,"endColumn":16},{"ruleId":"187","severity":1,"message":"190","line":570,"column":15,"nodeType":"174","messageId":"189","endLine":570,"endColumn":16},{"ruleId":"181","severity":1,"message":"182","line":577,"column":20,"nodeType":"178","messageId":"183","endLine":577,"endColumn":21},{"ruleId":"181","severity":1,"message":"182","line":577,"column":29,"nodeType":"178","messageId":"183","endLine":577,"endColumn":31},{"ruleId":"176","severity":1,"message":"177","line":626,"column":28,"nodeType":"178","messageId":"166","endLine":626,"endColumn":30},{"ruleId":"187","severity":1,"message":"188","line":636,"column":15,"nodeType":"174","messageId":"189","endLine":636,"endColumn":16},{"ruleId":"187","severity":1,"message":"190","line":637,"column":15,"nodeType":"174","messageId":"189","endLine":637,"endColumn":16},{"ruleId":"181","severity":1,"message":"182","line":644,"column":20,"nodeType":"178","messageId":"183","endLine":644,"endColumn":21},{"ruleId":"181","severity":1,"message":"182","line":644,"column":29,"nodeType":"178","messageId":"183","endLine":644,"endColumn":31},{"ruleId":"191","severity":1,"message":"192","line":102,"column":19,"nodeType":"193","messageId":"194","endLine":102,"endColumn":30},{"ruleId":"191","severity":1,"message":"192","line":107,"column":19,"nodeType":"193","messageId":"194","endLine":107,"endColumn":30},{"ruleId":"176","severity":1,"message":"184","line":133,"column":18,"nodeType":"178","messageId":"166","endLine":133,"endColumn":20},{"ruleId":"195","severity":1,"message":"196","line":49,"column":5,"nodeType":"197","endLine":49,"endColumn":15},{"ruleId":"176","severity":1,"message":"184","line":69,"column":13,"nodeType":"178","messageId":"166","endLine":69,"endColumn":15},{"ruleId":"168","severity":1,"message":"169","line":79,"column":7,"nodeType":"170","messageId":"171","endLine":90,"endColumn":8},{"ruleId":"176","severity":1,"message":"177","line":82,"column":24,"nodeType":"178","messageId":"166","endLine":82,"endColumn":26},{"ruleId":"198","severity":1,"message":"199","line":87,"column":9,"nodeType":"200","messageId":"201","endLine":89,"endColumn":17},{"ruleId":"176","severity":1,"message":"184","line":168,"column":104,"nodeType":"178","messageId":"166","endLine":168,"endColumn":106},{"ruleId":"176","severity":1,"message":"177","line":183,"column":44,"nodeType":"178","messageId":"166","endLine":183,"endColumn":46},{"ruleId":"176","severity":1,"message":"177","line":183,"column":101,"nodeType":"178","messageId":"166","endLine":183,"endColumn":103},{"ruleId":"176","severity":1,"message":"184","line":209,"column":40,"nodeType":"178","messageId":"166","endLine":209,"endColumn":42},{"ruleId":"195","severity":1,"message":"196","line":221,"column":9,"nodeType":"197","endLine":221,"endColumn":38},{"ruleId":"195","severity":1,"message":"196","line":223,"column":9,"nodeType":"197","endLine":223,"endColumn":38},{"ruleId":"176","severity":1,"message":"184","line":235,"column":42,"nodeType":"178","messageId":"166","endLine":235,"endColumn":44},{"ruleId":"168","severity":1,"message":"169","line":272,"column":5,"nodeType":"170","messageId":"171","endLine":285,"endColumn":6},{"ruleId":"168","severity":1,"message":"169","line":323,"column":7,"nodeType":"170","messageId":"171","endLine":334,"endColumn":8},{"ruleId":"172","severity":1,"message":"173","line":330,"column":20,"nodeType":"174","messageId":"175","endLine":330,"endColumn":21},{"ruleId":"176","severity":1,"message":"184","line":41,"column":28,"nodeType":"178","messageId":"166","endLine":41,"endColumn":30},{"ruleId":"176","severity":1,"message":"184","line":41,"column":72,"nodeType":"178","messageId":"166","endLine":41,"endColumn":74},{"ruleId":"168","severity":1,"message":"169","line":43,"column":5,"nodeType":"170","messageId":"171","endLine":65,"endColumn":6},{"ruleId":"176","severity":1,"message":"177","line":42,"column":36,"nodeType":"178","messageId":"166","endLine":42,"endColumn":38},{"ruleId":"176","severity":1,"message":"177","line":46,"column":30,"nodeType":"178","messageId":"166","endLine":46,"endColumn":32},{"ruleId":"176","severity":1,"message":"184","line":49,"column":17,"nodeType":"178","messageId":"166","endLine":49,"endColumn":19},{"ruleId":"202","severity":1,"message":"203","line":65,"column":18,"nodeType":"174","messageId":"204","endLine":65,"endColumn":19},{"ruleId":"202","severity":1,"message":"205","line":65,"column":21,"nodeType":"174","messageId":"204","endLine":65,"endColumn":22},{"ruleId":"206","severity":1,"message":"207","line":67,"column":23,"nodeType":"178","messageId":"208","endLine":67,"endColumn":51},{"ruleId":"202","severity":1,"message":"203","line":69,"column":18,"nodeType":"174","messageId":"204","endLine":69,"endColumn":19},{"ruleId":"202","severity":1,"message":"205","line":69,"column":21,"nodeType":"174","messageId":"204","endLine":69,"endColumn":22},{"ruleId":"202","severity":1,"message":"203","line":82,"column":36,"nodeType":"174","messageId":"204","endLine":82,"endColumn":37},{"ruleId":"202","severity":1,"message":"205","line":82,"column":39,"nodeType":"174","messageId":"204","endLine":82,"endColumn":40},{"ruleId":"202","severity":1,"message":"203","line":84,"column":24,"nodeType":"174","messageId":"204","endLine":84,"endColumn":25},{"ruleId":"202","severity":1,"message":"205","line":84,"column":34,"nodeType":"174","messageId":"204","endLine":84,"endColumn":35},{"ruleId":"202","severity":1,"message":"203","line":87,"column":39,"nodeType":"174","messageId":"204","endLine":87,"endColumn":40},{"ruleId":"202","severity":1,"message":"205","line":87,"column":42,"nodeType":"174","messageId":"204","endLine":87,"endColumn":43},{"ruleId":"206","severity":1,"message":"207","line":105,"column":21,"nodeType":"178","messageId":"208","endLine":105,"endColumn":49},{"ruleId":"172","severity":1,"message":"179","line":111,"column":17,"nodeType":"174","messageId":"175","endLine":111,"endColumn":19},{"ruleId":"176","severity":1,"message":"184","line":127,"column":26,"nodeType":"178","messageId":"166","endLine":127,"endColumn":28},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-extra-bind","The function binding is unnecessary.","CallExpression","unexpected",{"range":"211","text":"212"},"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-redeclare","'i' is already defined.","Identifier","redeclared","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'id' is already defined.","'hex' is already defined.","no-mixed-operators","Unexpected mix of '&' and '>>'.","unexpectedMixedOperator","Expected '===' and instead saw '=='.","'x' is already defined.","'y' is already defined.","no-unused-vars","'x' is assigned a value but never used.","unusedVar","'y' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","no-use-before-define","'x' was used before it was defined.","usedBeforeDefined","'y' was used before it was defined.","use-isnan","Use the isNaN function to compare with NaN.","comparisonWithNaN","no-global-assign","no-unsafe-negation",[1749,1760],""]